{
  "openapi": "3.0.0",
  "info": {
    "title": "Greenbyte API",
    "description": "This is the **beta version** of the public API for the Greenbyte Platform.\nIt contains **new features** (endpoints, parameters, etc.) that we\nencourage you to try out before they are released as a stable version.\n\n**Note that some details might change**, meaning that any SDKs\ndownloaded for this version might have minor incompatibilities in the\nfuture.\n\nFeatures that are in beta are clearly marked with the label \"**(BETA)**\"\nso that you can know what features are stable. If you would rather view\nthe latest stable API documentation, please use the version selection\ndropdown in the top right of the page.\n\n# What's new\n\n## 2020-04-12 - Improvement to List Status endpoint\nTurbine status ID has been added to the status endpoint.\n\n## 2020-03-22 - Improvement to List Site Accesses endpoint\nThe List Site Accesses endpoint now returns all individual personnel and the times they accessed the site.\n\n## 2020-03-15 - Improvements to Plan endpoints\nThe List Tasks endpoint now returns related metadata fields.\n\n## 2020-02-15 - More Plan endpoints **(BETA)**\nWe have added the following endpoints under the **Plan** section:\n* [List Task Categories](#/http/api-endpoints/plan/list-task-categories)\n* [List Organizations](#/http/api-endpoints/plan/list-organizations)\n* [List Personnel](#/http/api-endpoints/plan/list-personnel)\n* [List Task Files](#/http/api-endpoints/plan/list-task-files)\n* [Download Task File](#/http/api-endpoints/plan/download-task-file)\n\n## 2021-02-08 - Add UTC support\nUTC support has been added for all endpoints that return timestamps.\nBy setting the `useUtc` flag to true timestamps will be returned in UTC time zone instead of client time zone.\nThe flag is set to false by default.\n\n## 2020-01-25 - Plan endpoints **(BETA)**\nWe have introduced a **Plan** section containing the following endpoints:\n* [List Tasks](#/http/api-endpoints/plan/list-tasks)\n* [List Task Comments](#/http/api-endpoints/plan/list-task-comments)\n* [List Downtime Events](#/http/api-endpoints/plan/list-downtime-events)\n* [List Site Accesses](#/http/api-endpoints/plan/list-site-accesses)\n* [List Device Accesses](#/http/api-endpoints/plan/list-device-accesses)\n\n## 2020-01-18 - API key authentication changes\nThe preferred method of authenticating with the API is now to pass the\nAPI key via the HTTP header `X-Api-Key`. The old methods, passing it as\nquery parameter or via the old header `Breeze-ApiToken`, will continue\nto work but are deprecated.\n\nNote that this change causes a breaking change in some of the SDKs, for\nexample, if you use the C# SDK and explicitly set the API key on the\n`Configuration` class. This is only an issue if you download a new\nversion of the SDK and want to use it with existing code.\n* Solution: Instead of adding the API key to the\n  `ApiToken`/`BreezeApiToken` property, you need to use the `XApiKey`\n  property.\n\n## 2021-01-11 ‚Äì Optional `.json` suffix\nThe `.json` suffix is no longer necessary when calling the API. That\nmeans that calls to for instance `configuration` or `configuration.json`\nwill return the same result. Endpoints that currently support the\n`.json` suffix will continue to do so but it is considered deprecated.\n\n## 2020-08-31 ‚Äì Endpoint permissions\nWe have added more fine-grained permissions for the API. When creating or editing an API key, you can now set permissions for specific API endpoints ([API key guide](#/http/guides/managing-api-keys)). Existing API keys will have permissions for all existing endpoints.\n\nSee the documentation for specific endpoints for information on which permissions are required.\n\n## 2020-08-28 ‚Äì Improvement for status endpoints\nIt is now possible to select which lost production signal will be returned when requesting status data from the API. The following endpoints are affected:\n* [Get Statuses](#/http/api-endpoints/assets/get-statuses)\n* [Get Active Statuses](#/http/api-endpoints/assets/get-active-statuses)\n\n## 2020-08-20 ‚Äì Real Time Data and Data Per Category endpoints aggregation by site level\nYou can now aggregate your data based on site hierarchy levels when calling the Real Time Data and Data Per Category endpoints.\n\nThe new `siteLevel` aggregation mode (`aggregate` parameter) enable this new type of aggregation.\n\n## 2020-06-29 ‚Äì Site endpoint\nWe have added a new endpoint for fetching sites and related meta data.\nYou can find more information about this endpoint here:\n[Get Sites](#/http/api-endpoints/assets/get-sites).\n\n## 2020-06-29 ‚Äì Device endpoint improvements\nThe Device endpoint has been improved:\n* New request parameters for filtering on sites (`siteIds`) and/or\n  parent devices (`parentIds`).\n* New response fields for device type (`deviceTypeId`), parent device\n  (`parentId`), and child devices (`childIds`)\n\n## 2020-06-29 ‚Äì Data endpoint aggregation by site level\nYou can now aggregate your data according to the site hierarchy which you can see in the device selector when calling the Data endpoint.\n\nThe new `siteLevel` aggregation mode (`aggregate` parameter) aggregates data based on the site hierarchy.\n\n## 2020-06-29 ‚Äì Minor API improvements\n### Problem description in error responses\nAPI error responses such as *400 Bad Request* now contain details about\nwhat is wrong, for example, if a request parameter is missing or has\ninvalid value. See the error response description for each endpoint for\nspecific examples.\n\n### Changes to HTTP rate limit headers\nThe format of the HTTP headers regarding rate limiting has changed:\n* `X-Rate-Limit-Limit` ‚Äì This now contains the rate limit period as a\n  string (previously the number of allowed requests for a given period).\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests for this\n  period (like before, no change).\n* `X-Rate-Limit-Reset` ‚Äì This now contains the UTC timestamp string when\n  the remaining number of requests resets (previously the number of\n  seconds left until the end of the period).\n\nMore information is available under the *429 Too Many Requests* error\nresponse description for each endpoint.\n\n### Support for time zone offsets in timestamp parameters\nIt is now possible to specify timestamp strings with an explicit time\nzone (UTC) offset, for example \"2020-05-10T09:00:00+01:30\".\n\n### Proper use of error response codes\nSome error responses with the code *401 Unauthorized* will now instead\nbe *403 Forbidden* to better match web API best practices. This is work\nin progress, with the goal of having all failed authorization checks\nreturn code 403 rather than 401 in the future.\n\n## 2020-06-08 ‚Äì Data endpoint aggregation by group\nIf you have divided you sites into groups of assets, you can now aggregate your data by those groups when calling the Data, Real Time Data, and Data Per Category endpoints.\nThe new `deviceLevel` aggregation mode (`aggregate` parameter) aggregates data based on the hierarchy level directly below site.\n\n## 2020-04-27 ‚Äì Data signal permissions\nIt is now possible to set permissions for individual data signals for API keys (**Share** > **API Keys** in the Greenbyte\nPlatform). When adding/editing an API key, there is a new option to select authorized data signals in addition to the\ndevice selection. Leaving the signal selection blank (nothing selected) gives permission to all current and future data\nsignals, just like previously created API keys.\n\nAPI endpoints affected by data signal permissions:\n* `datasignals.json`: filters returned data signals based on permissions.\n* `data.json`, `realtimedata.json`, `datapercategory.json`: gives *401 Unauthorized* error for data signals without permission.\n* `status.json`, `activestatus.json`: may omit lost production values (in the `lostProduction` field) based on data signal permissions.\n\n## 2020-03-30 ‚Äì Data Per Category endpoint\nWe have added a new endpoint to the Greenbyte Platform to make it possible to extract Lost Production data per contract category from the API. You can find more information about this endpoint here: [Data Per Category](#/http/api-endpoints/data/get-data-per-category).\n\n# General notes regarding endpoints\n\n* Some endpoints take `page` and `pageSize` parameters in order to\n  support fetching data in chunks. The default values are 50 for\n  `pageSize` and 1 for `page`, meaning that the first 50 items will be\n  returned. These endpoints also return a `Link` header as defined in\n  [RFC 8288](https://tools.ietf.org/html/rfc8288).\n* Some endpoints return data in the time zone configured in the Greenbyte Platform. This time zone can\n  be fetched from the `configuration.json` endpoint.\n* All endpoints can also be reached using the POST method, with a JSON\n  request body instead of query parameters.\n* All endpoints implement rate limiting, which is currently 1,000\n  requests/minute per API key and IP address. More information is\n  available under the *429 Too Many Requests* error response description\n  for each endpoint.\n",
    "contact": {},
    "version": "2.2-beta"
  },
  "servers": [
    {
      "url": "https://{customer}.greenbyte.cloud/api/2",
      "description": "The Greenbyte API for a specific customer",
      "variables": {
        "customer": {
          "default": "intro",
          "description": "The customer sub-domain"
        }
      }
    }
  ],
  "paths": {
    "/datasignals": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "getDataSignals",
        "description": "Gets authorized data signals for one or more devices.\n\n_üîê This endpoint requires the **Data** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getDataSignals",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "What devices to get data signals for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data signals available for one or several of the devices.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataSignalItem"
                  },
                  "description": "",
                  "example": [
                    {
                      "dataSignalId": 1,
                      "title": "Wind speed",
                      "type": "Wind speed",
                      "unit": "m/s"
                    },
                    {
                      "dataSignalId": 5,
                      "title": "Power",
                      "type": "Power",
                      "unit": "kW"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/data": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "getData",
        "description": "Gets data for multiple devices and data signals in the given\nresolution. The timestamps are in the time zone configured in the Greenbyte Platform.\nUse the useUtc flag to get timestamps in UTC for all resolutions other than daily, weekly, monthly and yearly.\n\n_üîê This endpoint requires the **Data** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getData",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "Which devices to get data for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "dataSignalIds",
            "in": "query",
            "description": "Which data signals to get data for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                5
              ]
            }
          },
          {
            "name": "timestampStart",
            "in": "query",
            "description": "The beginning of the time interval to get data for (inclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe start timestamp **is** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00Z"
            }
          },
          {
            "name": "timestampEnd",
            "in": "query",
            "description": "The end of the time interval to get data for (exclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe end timestamp is **not** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-08T00:00:00Z"
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "resolution",
            "in": "query",
            "description": "The desired data resolution.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/Resolution"
            }
          },
          {
            "name": "aggregate",
            "in": "query",
            "description": "How the data should be aggregated with regards to device(s) or site(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/AggregateMode"
            }
          },
          {
            "name": "aggregateLevel",
            "in": "query",
            "description": "When AggregateMode `siteLevel` is used this parameter\ncontrols down to which level in the hierarchy to aggregate.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "calculation",
            "in": "query",
            "description": "The calculation used when aggregating data, both over time and across devices. The default is the data signal default.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CalculationMode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data grouped by data signal and aggregate.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataItem"
                  },
                  "description": "",
                  "example": [
                    {
                      "aggregate": "device",
                      "aggregateId": 1,
                      "aggregatePathNames": [],
                      "deviceIds": [
                        1
                      ],
                      "resolution": "hourly",
                      "calculation": "sum",
                      "dataSignal": {
                        "dataSignalId": 1,
                        "title": "Wind speed",
                        "unit": "m/s"
                      },
                      "data": {
                        "2020-01-01T00:00:00": 6.89,
                        "2020-01-01T01:00:00": 8.33
                      }
                    },
                    {
                      "aggregate": "device",
                      "aggregateId": 1,
                      "aggregatePathNames": [],
                      "deviceIds": [
                        1
                      ],
                      "resolution": "hourly",
                      "calculation": "sum",
                      "dataSignal": {
                        "dataSignalId": 5,
                        "title": "Power",
                        "unit": "kW"
                      },
                      "data": {
                        "2020-01-01T00:00:00": 584.33,
                        "2020-01-01T01:00:00": 1014
                      }
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/realtimedata": {
      "get": {
        "tags": [
          "data"
        ],
        "summary": "getRealTimeData",
        "description": "Gets the most recent data point for each\nspecified device and data signal. The timestamps are in UTC.\n\n_üîê This endpoint requires the **Data** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getRealTimeData",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "Which devices to get data for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "dataSignalIds",
            "in": "query",
            "description": "Which data signals to get data for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                5
              ]
            }
          },
          {
            "name": "aggregate",
            "in": "query",
            "description": "How the data should be aggregated with regards to device(s) or site(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/AggregateMode"
            }
          },
          {
            "name": "aggregateLevel",
            "in": "query",
            "description": "When AggregateMode `siteLevel` is used this parameter\ncontrols down to which level in the hierarchy to aggregate.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "calculation",
            "in": "query",
            "description": "The calculation used when aggregating data, both over time and across devices. The default is the data signal default.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/CalculationModeRealTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The most recent data points grouped by data signal and aggregate.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DataRealTimeItem"
                  },
                  "description": "",
                  "example": [
                    {
                      "aggregate": "device",
                      "aggregateId": 24,
                      "aggregatePathNames": [],
                      "deviceIds": [
                        24
                      ],
                      "calculation": "sum",
                      "dataSignal": {
                        "dataSignalId": 5,
                        "title": "Power",
                        "unit": "kW"
                      },
                      "data": {
                        "2020-03-17T12:50:02Z": 2174
                      }
                    },
                    {
                      "aggregate": "device",
                      "aggregateId": 24,
                      "aggregatePathNames": [],
                      "deviceIds": [
                        24
                      ],
                      "calculation": "sum",
                      "dataSignal": {
                        "dataSignalId": 1,
                        "title": "Wind speed",
                        "unit": "m/s"
                      },
                      "data": {
                        "2020-03-17T12:50:02Z": 12.2
                      }
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/datapercategory": {
      "get": {
        "tags": [
          "data",
          "statuses"
        ],
        "summary": "getDataPerCategory",
        "description": "Gets signal data aggregated per availability contract category.\n\n_üîê This endpoint requires the **Data** and **Statuses** endpoint permissions._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getDataPerCategory",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "Which devices to get data for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "dataSignalId",
            "in": "query",
            "description": "Which signal to get data for; only Lost Production signals are supported at the moment.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32",
              "example": 248
            }
          },
          {
            "name": "timestampStart",
            "in": "query",
            "description": "The beginning of the time interval to get data for (inclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe start timestamp **is** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00Z"
            }
          },
          {
            "name": "timestampEnd",
            "in": "query",
            "description": "The end of the time interval to get data for (exclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe end timestamp is **not** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-08T00:00:00Z"
            }
          },
          {
            "name": "aggregate",
            "in": "query",
            "description": "How the data should be aggregated with regards to device(s) or site(s).",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/AggregateMode"
            }
          },
          {
            "name": "aggregateLevel",
            "in": "query",
            "description": "When AggregateMode `siteLevel` is used this parameter\ncontrols down to which level in the hierarchy to aggregate.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Which status categories to include. By default all categories are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StatusCategory"
              },
              "example": [
                "stop"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data grouped by aggregate (device, site, etc.) and contract category.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/DataPerCategoryResponse"
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/status": {
      "get": {
        "tags": [
          "statuses"
        ],
        "summary": "getStatuses",
        "description": "Gets statuses for multiple devices during the given time period.\nThe timestamps are in the time zone configured in the Greenbyte Platform.\nUse the useUtc flag to get timestamps in UTC.\n\n_üîê This endpoint requires the **Statuses** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getStatuses",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "Which devices to get statuses for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "timestampStart",
            "in": "query",
            "description": "The beginning of the time interval to get data for (inclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe start timestamp **is** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00Z"
            }
          },
          {
            "name": "timestampEnd",
            "in": "query",
            "description": "The end of the time interval to get data for (exclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe end timestamp is **not** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-08T00:00:00Z"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Which status categories to get statuses for.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StatusCategory"
              }
            }
          },
          {
            "name": "lostProductionSignalId",
            "in": "query",
            "description": "Which data signal to use for calculating lost production. Defaults to the configured default lost production signal.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32",
              "example": 432
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `StatusItem` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "deviceId",
                "message",
                "lostProduction"
              ]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Which fields to sort the response items by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortAsc",
            "in": "query",
            "description": "Whether to sort the items in ascending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of statuses with related data.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusItem"
                  },
                  "description": ""
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/activestatus": {
      "get": {
        "tags": [
          "statuses"
        ],
        "summary": "getActiveStatuses",
        "description": "Gets active statuses for multiple devices.\nThe timestamps are in the time zone configured in the Greenbyte Platform.\nUse the useUtc flag to get timestamps in UTC.\n\n_üîê This endpoint requires the **Statuses** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getActiveStatuses",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "Which devices to get statuses for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Which status categories to get statuses for.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StatusCategory"
              }
            }
          },
          {
            "name": "lostProductionSignalId",
            "in": "query",
            "description": "Which data signal to use for calculating lost production. Defaults to the configured default lost production signal.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32",
              "example": 432
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `StatusItem` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "deviceId",
                "message",
                "lostProduction"
              ]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Which fields to sort the response items by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortAsc",
            "in": "query",
            "description": "Whether to sort the items in ascending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of active statuses with related data.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatusItem"
                  },
                  "description": ""
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/configuration": {
      "get": {
        "tags": [
          "configuration data"
        ],
        "summary": "getConfiguration",
        "description": "Gets your system-wide configuration data.\n\n_üîê This endpoint requires the **Configuration** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getConfiguration",
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array with a single item containing configuration data.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationItem"
                  },
                  "description": "",
                  "example": [
                    {
                      "client": {
                        "title": "Intro (Greenbyte AB)",
                        "tag": "intro",
                        "urlWeb": "https://intro.greenbyte.cloud/",
                        "urlApi": "https://intro.greenbyte.cloud/api/2.0/"
                      },
                      "timeZone": {
                        "title": "Europe/Stockholm",
                        "utcOffset": 1,
                        "utcOffsetDst": 2,
                        "dstTimestampStart": "2020-03-29T01:00:00",
                        "dstTimestampEnd": "2020-10-25T01:00:00"
                      },
                      "dataSignals": {
                        "availabilityTimeDataSignalId": 430,
                        "availabilityProductionDataSignalId": 445,
                        "lostProductionDataSignalId": 432,
                        "performanceDataSignalId": 436
                      }
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/devices": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "getDevices",
        "description": "Gets a list of devices that the API key has permissions for.\n\n_üîê This endpoint requires the **Assets** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getDevices",
        "parameters": [
          {
            "name": "deviceTypeIds",
            "in": "query",
            "description": "Only include devices of these types.\nExamples:\n* 1 - Wind turbine\n* 2 - Production meter\n* 3 - Met mast\n* 4 - Inverter\n* 10 - Device group\n* 11 - Grid meter\n* 12 - Combiner box\n* 23 - String\n* 27 - Virtual Meteo Sensor",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "siteIds",
            "in": "query",
            "description": "Only include devices at these sites.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "parentIds",
            "in": "query",
            "description": "Only include devices with these parent devices.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `Device` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of devices with associated metadata.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Device"
                  },
                  "description": "",
                  "example": [
                    {
                      "deviceId": 1121,
                      "title": "Enerburg group A",
                      "altTitle": null,
                      "identity": null,
                      "site": {
                        "siteId": 7,
                        "title": "Enerburg"
                      },
                      "deviceType": "Group",
                      "deviceTypeId": 10,
                      "parentId": null,
                      "childIds": [
                        69,
                        70
                      ],
                      "deviceModel": null,
                      "deviceModelId": 41,
                      "manufacturer": "Generic group",
                      "model": "Generic",
                      "maxPower": 0,
                      "timestampStart": "2013-10-01T02:00:00",
                      "latitude": "32.36431",
                      "longitude": "-88.7037",
                      "elevation": "0",
                      "metadata": []
                    },
                    {
                      "deviceId": 69,
                      "title": "Enerburg 1",
                      "altTitle": null,
                      "identity": null,
                      "site": {
                        "siteId": 7,
                        "title": "Enerburg"
                      },
                      "deviceType": "Turbine",
                      "deviceTypeId": 1,
                      "parentId": 1121,
                      "childIds": [],
                      "deviceModel": null,
                      "turbineType": {
                        "turbineTypeId": 1,
                        "title": "Enercon E-82 E2 2.3MW",
                        "manufacturer": "Enercon",
                        "model": "E-82",
                        "controller": "CS82a",
                        "ratedPower": 2300,
                        "maxRotorSpeed": 18
                      },
                      "maxPower": 2300,
                      "biddingArea": null,
                      "timestampStart": "2013-10-01T02:00:00",
                      "latitude": "32.36431",
                      "longitude": "-88.7037",
                      "elevation": "0",
                      "targetAvailability": 97,
                      "metadata": [
                        {
                          "key": "Hub Height",
                          "value": "120"
                        },
                        {
                          "key": "Direct Drive",
                          "value": "no"
                        },
                        {
                          "key": "Blade Heating",
                          "value": "yes"
                        }
                      ]
                    },
                    {
                      "deviceId": 70,
                      "title": "Enerburg 2",
                      "altTitle": null,
                      "identity": null,
                      "site": {
                        "siteId": 7,
                        "title": "Enerburg"
                      },
                      "deviceType": "Turbine",
                      "deviceTypeId": 1,
                      "parentId": 1121,
                      "childIds": [],
                      "deviceModel": null,
                      "turbineType": {
                        "turbineTypeId": 1,
                        "title": "Enercon E-82 E2 2.3MW",
                        "manufacturer": "Enercon",
                        "model": "E-82",
                        "controller": "CS82a",
                        "ratedPower": 2300,
                        "maxRotorSpeed": 18
                      },
                      "maxPower": 2300,
                      "biddingArea": null,
                      "timestampStart": "2013-10-01T02:00:00",
                      "latitude": "32.3602",
                      "longitude": "-88.7194",
                      "elevation": "0",
                      "targetAvailability": null,
                      "metadata": [
                        {
                          "key": "Hub Height",
                          "value": "120"
                        },
                        {
                          "key": "Direct Drive",
                          "value": "no"
                        },
                        {
                          "key": "Blade Heating",
                          "value": "yes"
                        }
                      ]
                    },
                    {
                      "deviceId": 71,
                      "title": "Enerburg 3",
                      "altTitle": null,
                      "identity": null,
                      "site": {
                        "siteId": 7,
                        "title": "Enerburg"
                      },
                      "deviceType": "Turbine",
                      "deviceModel": null,
                      "parentId": null,
                      "childIds": [],
                      "deviceTypeId": 1,
                      "turbineType": {
                        "turbineTypeId": 1,
                        "title": "Enercon E-82 E2 2.3MW",
                        "manufacturer": "Enercon",
                        "model": "E-82",
                        "controller": "CS82a",
                        "ratedPower": 2300,
                        "maxRotorSpeed": 18
                      },
                      "maxPower": 2300,
                      "biddingArea": null,
                      "timestampStart": "2013-10-01T02:00:00",
                      "latitude": "32.35697",
                      "longitude": "-88.7182",
                      "elevation": "0",
                      "targetAvailability": null,
                      "metadata": []
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/sites": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "getSites",
        "description": "Gets a list of sites that the API key has permissions\nfor.\n\n_üîê This endpoint requires the **Assets** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getSites",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `SiteWithData` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "siteId",
                "title"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sites with associated metadata.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SiteWithData"
                  },
                  "description": "",
                  "example": [
                    {
                      "siteId": 1,
                      "title": "Wind farm 1",
                      "country": "Sweden",
                      "identity": "SE-WF1",
                      "metadata": [
                        {
                          "key": "Address",
                          "value": "Wind Street 123"
                        },
                        {
                          "key": "Phone",
                          "value": "555 123 456"
                        }
                      ]
                    },
                    {
                      "siteId": 2,
                      "title": "Solar site 1",
                      "country": "Spain",
                      "identity": "ES-SS1",
                      "metadata": [
                        {
                          "key": "Address",
                          "value": "Sun Street 456"
                        },
                        {
                          "key": "Phone",
                          "value": "555 456 789"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/powercurves": {
      "get": {
        "tags": [
          "assets"
        ],
        "summary": "getPowerCurves",
        "description": "Gets the default or learned power curves for wind turbines.\nOther device types are not supported.\n\n_üîê This endpoint requires the **PowerCurves** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getPowerCurves",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "What devices to get power curves for. Only wind turbines are supported.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "The date for which to get power curves. The default is the current date.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-01-01"
            }
          },
          {
            "name": "learned",
            "in": "query",
            "description": "Whether to get learned power curves instead of default power curves.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of objects containing device ids and associated power curves.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PowerCurve"
                  },
                  "description": "",
                  "example": [
                    {
                      "deviceId": 1,
                      "title": "Enercon E-82 Noise mode 0",
                      "values": [
                        {
                          "windSpeed": 1,
                          "power": 0
                        },
                        {
                          "windSpeed": 4,
                          "power": 88
                        },
                        {
                          "windSpeed": 5,
                          "power": 205
                        },
                        {
                          "windSpeed": 6,
                          "power": 371
                        },
                        {
                          "windSpeed": 7,
                          "power": 601
                        },
                        {
                          "windSpeed": 8,
                          "power": 901
                        },
                        {
                          "windSpeed": 9,
                          "power": 1243
                        },
                        {
                          "windSpeed": 10,
                          "power": 1591
                        },
                        {
                          "windSpeed": 11,
                          "power": 1876
                        },
                        {
                          "windSpeed": 12,
                          "power": 1979
                        },
                        {
                          "windSpeed": 13,
                          "power": 1999
                        },
                        {
                          "windSpeed": 14,
                          "power": 2000
                        },
                        {
                          "windSpeed": 15,
                          "power": 2000
                        },
                        {
                          "windSpeed": 16,
                          "power": 2000
                        },
                        {
                          "windSpeed": 17,
                          "power": 2000
                        },
                        {
                          "windSpeed": 18,
                          "power": 2000
                        },
                        {
                          "windSpeed": 19,
                          "power": 2000
                        },
                        {
                          "windSpeed": 20,
                          "power": 2000
                        },
                        {
                          "windSpeed": 21,
                          "power": 2000
                        },
                        {
                          "windSpeed": 22,
                          "power": 2000
                        },
                        {
                          "windSpeed": 23,
                          "power": 2000
                        },
                        {
                          "windSpeed": 24,
                          "power": 2000
                        },
                        {
                          "windSpeed": 25,
                          "power": 2000
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/activealerts": {
      "get": {
        "tags": [
          "alerts"
        ],
        "summary": "getActiveAlerts",
        "description": "Gets active alerts for multiple devices.\nThe timestamps are in the time zone configured in the Greenbyte Platform.\nUse the useUtc flag to get timestamps in UTC.\n\n_üîê This endpoint requires the **Alerts** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getActiveAlerts",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "What devices to get alerts for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `AlertItem` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "ruleId",
                "timestampStart"
              ]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Which fields to sort the response items by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortAsc",
            "in": "query",
            "description": "Whether to sort the items in ascending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of alerts.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertItem"
                  },
                  "description": "",
                  "example": [
                    {
                      "deviceId": 179,
                      "ruleId": 104,
                      "description": "Power curve less than 90%",
                      "details": "Evaluation period: 6 hours\nData coverage: 70% of devices\nExclude data during: Active Stop or Warning status\nData condition: The consecutive value of the performance index of Backen 2 is less than 90%\nData condition: The consecutive value of the wind speed of Backen 2 is greater than 5 m/s",
                      "timestampStart": "2020-03-18T06:50:00",
                      "timestampEnd": "2020-03-18T14:00:00",
                      "message": "Low Performance Wind",
                      "comment": "A comment"
                    },
                    {
                      "deviceId": 183,
                      "ruleId": 104,
                      "description": "Power curve less than 90%",
                      "details": "Evaluation period: 6 hours\nData coverage: 70% of devices\nExclude data during: Active Stop or Warning status\nData condition: The consecutive value of the performance index of Backen 6 is less than 90%\nData condition: The consecutive value of the wind speed of Backen 6 is greater than 5 m/s",
                      "timestampStart": "2020-03-18T07:40:00",
                      "timestampEnd": "2020-03-18T14:00:00",
                      "message": "Low Performance Wind",
                      "comment": "A comment"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/alerts": {
      "get": {
        "tags": [
          "alerts"
        ],
        "summary": "getAlerts",
        "description": "Gets alerts for multiple devices and the given time period.\nThe timestamps are in the time zone configured in the Greenbyte Platform.\nUse the useUtc flag to get timestamps in UTC.\n\n_üîê This endpoint requires the **Alerts** endpoint permission._\n\n_This request can also be made using the POST method, with a\nJSON request body instead of query parameters._\n",
        "operationId": "getAlerts",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "What devices to get alerts for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "timestampStart",
            "in": "query",
            "description": "The beginning of the time interval to get data for (inclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe start timestamp **is** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00Z"
            }
          },
          {
            "name": "timestampEnd",
            "in": "query",
            "description": "The end of the time interval to get data for (exclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe end timestamp is **not** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-08T00:00:00Z"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `AlertItem` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "ruleId",
                "timestampStart"
              ]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Which fields to sort the response items by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortAsc",
            "in": "query",
            "description": "Whether to sort the items in ascending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of alerts.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertItem"
                  },
                  "description": "",
                  "example": [
                    {
                      "deviceId": 179,
                      "ruleId": 104,
                      "description": "Power curve less than 90%",
                      "details": "Evaluation period: 6 hours\nData coverage: 70% of devices\nExclude data during: Active Stop or Warning status\nData condition: The consecutive value of the performance index of Backen 2 is less than 90%\nData condition: The consecutive value of the wind speed of Backen 2 is greater than 5 m/s",
                      "timestampStart": "2020-03-18T06:50:00",
                      "timestampEnd": "2020-03-18T14:00:00",
                      "message": "Low Performance Wind",
                      "comment": "A comment"
                    },
                    {
                      "deviceId": 183,
                      "ruleId": 104,
                      "description": "Power curve less than 90%",
                      "details": "Evaluation period: 6 hours\nData coverage: 70% of devices\nExclude data during: Active Stop or Warning status\nData condition: The consecutive value of the performance index of Backen 6 is less than 90%\nData condition: The consecutive value of the wind speed of Backen 6 is greater than 5 m/s",
                      "timestampStart": "2020-03-18T07:40:00",
                      "timestampEnd": "2020-03-18T14:00:00",
                      "message": "Low Performance Wind",
                      "comment": "A comment"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/activealarms": {
      "get": {
        "tags": [
          "alerts"
        ],
        "summary": "getActiveAlarms",
        "description": "_**This endpoint is deprecated.** Please use the new endpoint `/activealerts.json` instead._",
        "operationId": "getActiveAlarms",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "What devices to get alerts for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `AlertItem` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "ruleId",
                "timestampStart"
              ]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Which fields to sort the response items by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortAsc",
            "in": "query",
            "description": "Whether to sort the items in ascending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of alerts.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertItem"
                  },
                  "description": "",
                  "example": [
                    {
                      "deviceId": 179,
                      "ruleId": 104,
                      "description": "Power curve less than 90%",
                      "details": "Evaluation period: 6 hours\nData coverage: 70% of devices\nExclude data during: Active Stop or Warning status\nData condition: The consecutive value of the performance index of Backen 2 is less than 90%\nData condition: The consecutive value of the wind speed of Backen 2 is greater than 5 m/s",
                      "timestampStart": "2020-03-18T06:50:00",
                      "timestampEnd": "2020-03-18T14:00:00",
                      "message": "Low Performance Wind",
                      "comment": "A comment"
                    },
                    {
                      "deviceId": 183,
                      "ruleId": 104,
                      "description": "Power curve less than 90%",
                      "details": "Evaluation period: 6 hours\nData coverage: 70% of devices\nExclude data during: Active Stop or Warning status\nData condition: The consecutive value of the performance index of Backen 6 is less than 90%\nData condition: The consecutive value of the wind speed of Backen 6 is greater than 5 m/s",
                      "timestampStart": "2020-03-18T07:40:00",
                      "timestampEnd": "2020-03-18T14:00:00",
                      "message": "Low Performance Wind",
                      "comment": "A comment"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/alarms": {
      "get": {
        "tags": [
          "alerts"
        ],
        "summary": "getAlarms",
        "description": "_**This endpoint is deprecated.** Please use the new endpoint `/alerts.json` instead._",
        "operationId": "getAlarms",
        "parameters": [
          {
            "name": "deviceIds",
            "in": "query",
            "description": "What devices to get alerts for.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "timestampStart",
            "in": "query",
            "description": "The beginning of the time interval to get data for (inclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe start timestamp **is** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00Z"
            }
          },
          {
            "name": "timestampEnd",
            "in": "query",
            "description": "The end of the time interval to get data for (exclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe end timestamp is **not** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-08T00:00:00Z"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `AlertItem` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "ruleId",
                "timestampStart"
              ]
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Which fields to sort the response items by.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sortAsc",
            "in": "query",
            "description": "Whether to sort the items in ascending order.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of alerts.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertItem"
                  },
                  "description": "",
                  "example": [
                    {
                      "deviceId": 179,
                      "ruleId": 104,
                      "description": "Power curve less than 90%",
                      "details": "Evaluation period: 6 hours\nData coverage: 70% of devices\nExclude data during: Active Stop or Warning status\nData condition: The consecutive value of the performance index of Backen 2 is less than 90%\nData condition: The consecutive value of the wind speed of Backen 2 is greater than 5 m/s",
                      "timestampStart": "2020-03-18T06:50:00",
                      "timestampEnd": "2020-03-18T14:00:00",
                      "message": "Low Performance Wind",
                      "comment": "A comment"
                    },
                    {
                      "deviceId": 183,
                      "ruleId": 104,
                      "description": "Power curve less than 90%",
                      "details": "Evaluation period: 6 hours\nData coverage: 70% of devices\nExclude data during: Active Stop or Warning status\nData condition: The consecutive value of the performance index of Backen 6 is less than 90%\nData condition: The consecutive value of the wind speed of Backen 6 is greater than 5 m/s",
                      "timestampStart": "2020-03-18T07:40:00",
                      "timestampEnd": "2020-03-18T14:00:00",
                      "message": "Low Performance Wind",
                      "comment": "A comment"
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "description": "The server successfully processed the request, but is not returning any content.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tasks": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "listTasks",
        "description": "**(BETA)** Gets a list of tasks.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "listTasks",
        "parameters": [
          {
            "name": "timestampStart",
            "in": "query",
            "description": "The beginning of the time interval to get data for (inclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe start timestamp **is** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00Z"
            }
          },
          {
            "name": "timestampEnd",
            "in": "query",
            "description": "The end of the time interval to get data for (exclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe end timestamp is **not** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-08T00:00:00Z"
            }
          },
          {
            "name": "deviceIds",
            "in": "query",
            "description": "What devices to get tasks for.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "siteIds",
            "in": "query",
            "description": "What sites to get tasks for.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "categoryIds",
            "in": "query",
            "description": "What task categories to include.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "What state of tasks to get: resolved and unresolved. If\nnot set, both resolved and unresolved tasks are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/TaskState"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `Task` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "taskId",
                "title"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tasks matching the filter parameters.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  },
                  "description": "",
                  "example": [
                    {
                      "taskId": 10,
                      "title": "Maintenance",
                      "createdBy": {
                        "firstName": "Greenbyte",
                        "lastName": "Support"
                      },
                      "priority": "medium",
                      "timestampStart": "2020-01-01T00:00:00",
                      "timestampEnd": "2020-01-08T00:00:00",
                      "state": "unresolved",
                      "resolved": true,
                      "numberOfComments": 3
                    },
                    {
                      "taskId": 20,
                      "title": "Maintenance",
                      "createdBy": {
                        "firstName": "Greenbyte",
                        "lastName": "Support"
                      },
                      "priority": "medium",
                      "timestampStart": "2020-01-10T00:00:00",
                      "timestampEnd": "2020-01-12T00:00:00",
                      "state": "unresolved",
                      "resolved": true,
                      "numberOfComments": 0,
                      "metadata": [
                        {
                          "key": "Component",
                          "value": "Yaw encoder"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/task-categories": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "listTaskCategories",
        "description": "**(BETA)** Gets a list of task categories.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "listTaskCategories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of task categories.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskCategory"
                  },
                  "description": "",
                  "example": [
                    {
                      "categoryId": 10,
                      "title": "Scheduled maintenance"
                    },
                    {
                      "categoryId": 20,
                      "title": "Unscheduled maintenance"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tasks/{taskId}/comments": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "listTaskComments",
        "description": "**(BETA)** Gets a list of comments belonging to a task.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "listTaskComments",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "style": "simple",
            "schema": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `TaskComment` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "commentId",
                "text"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of comments belonging to the task.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskComment"
                  },
                  "description": "",
                  "example": [
                    {
                      "commentId": 10,
                      "text": "Task started",
                      "timestampCreated": "2020-01-01T00:00:00",
                      "createdBy": {
                        "firstName": "Greenbyte",
                        "lastName": "Support"
                      }
                    },
                    {
                      "commentId": 11,
                      "text": "Task finished",
                      "timestampCreated": "2020-01-02T00:00:00",
                      "createdBy": {
                        "firstName": "Greenbyte",
                        "lastName": "Support"
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tasks/{taskId}/files": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "listTaskFiles",
        "description": "**(BETA)** Gets a list of files belonging to a task.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "listTaskFiles",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "style": "simple",
            "schema": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `TaskFile` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "fileName",
                "description"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list with information about files belonging to the task.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TasksFilesResponse"
                  },
                  "description": "",
                  "example": [
                    {
                      "fileId": 501,
                      "fileName": "Upgrade.docx",
                      "timestampUploaded": "2020-05-29T16:12:34",
                      "uploadedBy": {
                        "firstName": "Greenbyte",
                        "lastName": "Support"
                      },
                      "description": "Aerodynamic upgrade report",
                      "category": "Reports"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The requested resource could not be found.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/tasks/{taskId}/files/{fileId}/content": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "downloadTaskFile",
        "description": "**(BETA)** Downloads a file belonging to a task.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "downloadTaskFile",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "style": "simple",
            "schema": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "style": "simple",
            "schema": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The contents of a file linked to the task.",
            "headers": {},
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The requested resource could not be found.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/downtime-events": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "listDowntimeEvents",
        "description": "**(BETA)** Gets a list of downtime events.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "listDowntimeEvents",
        "parameters": [
          {
            "name": "timestampStart",
            "in": "query",
            "description": "The beginning of the time interval to get data for (inclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe start timestamp **is** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00Z"
            }
          },
          {
            "name": "timestampEnd",
            "in": "query",
            "description": "The end of the time interval to get data for (exclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe end timestamp is **not** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-08T00:00:00Z"
            }
          },
          {
            "name": "deviceIds",
            "in": "query",
            "description": "What devices to get downtime events for.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "siteIds",
            "in": "query",
            "description": "What sites to get downtime events for.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `DowntimeEvent` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "deviceIds",
                "timestampStart"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of downtime events matching the filter parameters.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DowntimeEvent"
                  },
                  "description": "",
                  "example": [
                    {
                      "downtimeEventId": 1,
                      "deviceIds": [
                        1,
                        2,
                        3
                      ],
                      "timestampStart": "2020-01-01T00:00:00",
                      "timestampEnd": "2020-01-02T00:00:00",
                      "comment": "Planned downtime"
                    },
                    {
                      "downtimeEventId": 2,
                      "deviceIds": [
                        1,
                        2,
                        3
                      ],
                      "timestampStart": "2020-01-10T00:00:00",
                      "timestampEnd": "2020-01-12T00:00:00",
                      "comment": "Unplanned downtime"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/site-accesses": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "listSiteAccesses",
        "description": "**(BETA)** Gets a list of site accesses.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "listSiteAccesses",
        "parameters": [
          {
            "name": "timestampStart",
            "in": "query",
            "description": "The beginning of the time interval to get data for (inclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe start timestamp **is** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-01T00:00:00Z"
            }
          },
          {
            "name": "timestampEnd",
            "in": "query",
            "description": "The end of the time interval to get data for (exclusive),\nin [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6)\n**date-time** format:\n\n* Timestamps ending with 'Z' are treated as UTC. Example: \"2020-01-01T00:00:00Z\"\n* Time zone (UTC) offset timestamps ending with '+HH:mm'/\"-HH:mm\" are also supported. Example: \"2020-01-01T02:00:00-02:00\"\n* Other timestamps are treated as being in the time zone configured in the Greenbyte Platform. Example: \"2020-01-01T00:00:00\"\n\nThe end timestamp is **not** included in the time interval: for\nexample, to select the full month of March 2020, set\n`timestampStart` to \"2020-03-01T00:00:00\" and `timestampEnd` to\n\"2020-04-01T00:00:00\".",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2020-01-08T00:00:00Z"
            }
          },
          {
            "name": "deviceIds",
            "in": "query",
            "description": "What devices to get site accesses for.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "siteIds",
            "in": "query",
            "description": "What sites to get site accesses for.",
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1.0,
              "type": "array",
              "items": {
                "minimum": 1.0,
                "type": "integer",
                "format": "int32"
              },
              "example": [
                1,
                2,
                3
              ]
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `SiteAccess` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "siteAccessId",
                "timestampStart"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of site accesses matching the filter parameters.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SiteAccess"
                  },
                  "description": "",
                  "example": [
                    {
                      "siteAccessId": 10,
                      "deviceIds": [
                        11,
                        12
                      ],
                      "taskIds": [
                        66
                      ],
                      "siteAccessPersonnel": [
                        {
                          "personnelId": 1234,
                          "firstName": "Andreas",
                          "lastName": "Jonsson",
                          "company": "Power Offtakers Inc.",
                          "phoneNumber": "456-123",
                          "vehicleRegistration": "ABC456",
                          "comment": "Site access comment",
                          "timestampStart": "2020-04-30T10:03:00",
                          "timestampEnd": "2020-04-30T17:39:00"
                        }
                      ],
                      "timestampStart": "2020-01-01T12:00:00",
                      "timestampEndExpected": "2020-01-01T13:00:00",
                      "timestampEnd": "2020-01-01T13:30:00",
                      "logOnComment": "Investigating",
                      "logOffComment": "All clear"
                    },
                    {
                      "siteAccessId": 11,
                      "deviceIds": [
                        15
                      ],
                      "taskIds": [
                        55,
                        56
                      ],
                      "siteAccessPersonnel": [
                        {
                          "personnelId": 2345,
                          "firstName": "Andrea",
                          "lastName": "Larsson",
                          "company": "Power Offtakers Inc.",
                          "phoneNumber": "123-456",
                          "vehicleRegistration": "ABC123",
                          "comment": "Site access comment",
                          "timestampStart": "2020-04-30T10:04:00",
                          "timestampEnd": "2020-04-30T17:39:00"
                        }
                      ],
                      "timestampStart": "2020-01-02T12:00:00",
                      "timestampEndExpected": "2020-01-02T13:00:00",
                      "timestampEnd": "2020-01-02T13:30:00",
                      "logOnComment": "Investigating",
                      "logOffComment": "All clear"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/site-accesses/{siteAccessId}/device-accesses": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "listDeviceAccesses",
        "description": "**(BETA)** Gets a list of device accesses belonging to a site access.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "listDeviceAccesses",
        "parameters": [
          {
            "name": "siteAccessId",
            "in": "path",
            "description": "The id of the site access.",
            "required": true,
            "style": "simple",
            "schema": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `DeviceAccess` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "siteAccessId",
                "siteId"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "useUtc",
            "in": "query",
            "description": "Set to true to get timestamps in UTC.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of device accesses.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceAccess"
                  },
                  "description": "",
                  "example": [
                    {
                      "siteAccessId": 10,
                      "siteId": 50,
                      "personnelIds": [
                        11,
                        12
                      ],
                      "taskIds": [
                        55
                      ],
                      "timestampStart": "2020-01-02T12:00:00",
                      "timestampEndExpected": "2020-01-02T13:00:00"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The requested resource could not be found.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "listOrganizations",
        "description": "**(BETA)** Gets a list of organizations.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "listOrganizations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of organizations.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  },
                  "description": "",
                  "example": [
                    {
                      "organizationId": 10,
                      "name": "Power Offtakers Inc.",
                      "email": "support@power-offtakers.example.com",
                      "phone": "456-789"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/personnel": {
      "get": {
        "tags": [
          "plan"
        ],
        "summary": "listPersonnel",
        "description": "**(BETA)** Gets a list of personnel.\n\n_üîê This endpoint requires the **Plan** endpoint permission._\n\n_This is a beta feature. Some details might change before it is\nreleased as a stable version._\n",
        "operationId": "listPersonnel",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Which fields to include in the response. Valid fields are those defined in the `Personnel` schema (See Response Type). By default all fields are included.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "lastName",
                "phone"
              ]
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of items to return per page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Which page to return when the number of items exceed the page size.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of personnel matching the filter parameters.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Personnel"
                  },
                  "description": "",
                  "example": [
                    {
                      "personnelId": 5,
                      "firstName": "Greenbyte",
                      "lastName": "Support",
                      "email": "support@greenbyte.com",
                      "phone": "123-456",
                      "mobile": "654-321",
                      "organization": {
                        "organizationId": 10,
                        "name": "Power Offtakers Inc.",
                        "email": "support@power-offtakers.example.com",
                        "phone": "456-789"
                      },
                      "qualifications": [
                        {
                          "qualificationId": 85,
                          "manufacturer": "GE",
                          "qualificationType": "AP",
                          "qualificationDescription": "Authorized Person"
                        }
                      ],
                      "siteInductions": [
                        {
                          "siteInductionId": 43,
                          "siteId": 1,
                          "dateExpires": "2020-12-01"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be fulfilled due to bad syntax.",
            "headers": {},
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request is missing a valid API key.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "One of the following:\n* The API key does not authorize access to the requested endpoint because of a missing endpoint permission.\n* The API key does not authorize access to the requested data. Devices, sites or data signals can be limited.",
            "headers": {},
            "content": {}
          },
          "405": {
            "description": "The HTTP method is not allowed for the endpoint.",
            "headers": {},
            "content": {}
          },
          "429": {
            "description": "The API key has been used in too many requests in a given amount\nof time. The following headers will be set in the response:\n* `X-Rate-Limit-Limit` ‚Äì The rate limit period (for example\n  \"1m\", \"12h\", or \"1d\").\n* `X-Rate-Limit-Remaining` ‚Äì The remaining number of requests\n  for this period.\n* `X-Rate-Limit-Reset` ‚Äì The UTC timestamp string (in ISO 8601\n  format) when the remaining number of requests resets.\n\nThe limit is currently 1,000 requests/minute per API key and IP\naddress.",
            "headers": {
              "X-Rate-Limit-Limit": {
                "description": "The rate limit period (for example \"1m\", \"12h\", or \"1d\").",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Remaining": {
                "description": "The remaining number of requests for this period.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "X-Rate-Limit-Reset": {
                "description": "The UTC timestamp string (in ISO 8601 format) when the remaining number of requests resets.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "ProblemDetails": {
        "title": "ProblemDetails Absar",
        "required": [
          "status",
          "title"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
			"readOnly": true
          },
          "title": {
            "type": "string",
			"writeOnly": true
          }
        },
        "description": "Absar An object describing the problem with the request, following the [RFC 7807](https://tools.ietf.org/html/rfc7807) format."
      },
      "User": {
        "title": "User",
        "required": [
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          }
        }
      },
      "Resolution": {
        "title": "Resolution",
        "enum": [
          "5minute",
          "10minute",
          "15minute",
          "hourly",
          "daily",
          "weekly",
          "monthly",
          "yearly",
          "interval",
          "device"
        ],
        "type": "string",
        "description": "The resolution for time-series data."
      },
      "AggregateMode": {
        "title": "AggregateMode",
        "enum": [
          "device",
          "deviceLevel",
          "site",
          "portfolio",
          "siteLevel"
        ],
        "type": "string",
        "description": "How data is aggregated in the asset structure."
      },
      "CalculationMode": {
        "title": "CalculationMode",
        "enum": [
          "average",
          "sum",
          "counter"
        ],
        "type": "string",
        "description": "Which operation to use when aggregating data."
      },
      "CalculationModeRealTime": {
        "title": "CalculationModeRealTime",
        "enum": [
          "average",
          "sum"
        ],
        "type": "string",
        "description": "Which operation to use when aggregating data."
      },
      "DataSignal": {
        "title": "DataSignal",
        "required": [
          "dataSignalId",
          "title",
          "unit"
        ],
        "type": "object",
        "properties": {
          "dataSignalId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The unique id of a data signal.",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          }
        },
        "description": "A data signal.",
        "example": {
          "dataSignalId": 1,
          "title": "Wind Speed",
          "unit": "m/s"
        }
      },
      "DataSignalItem": {
        "title": "DataSignalItem",
        "required": [
          "dataSignalId",
          "title",
          "type",
          "unit"
        ],
        "type": "object",
        "properties": {
          "dataSignalId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The unique id of a data signal.",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          }
        },
        "description": "A data signal, including type.",
        "example": {
          "dataSignalId": 1,
          "title": "Wind speed",
          "type": "Wind speed",
          "unit": "m/s"
        }
      },
      "DataItem": {
        "title": "DataItem",
        "required": [
          "aggregate",
          "aggregateId",
          "deviceIds",
          "resolution",
          "calculation",
          "dataSignal",
          "data"
        ],
        "type": "object",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/AggregateMode"
          },
          "aggregateId": {
            "type": "integer",
            "description": "The id of this aggregate group: device id, site id, or the constant -1 for portfolio. For `siteLevel` aggregation a generated unique id is used.",
            "format": "int32"
          },
          "aggregatePathNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "For `siteLevel` aggregation this contains the title for each level in the hierarchy. For other types of aggregation it will be empty."
          },
          "deviceIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of the devices in this aggregate group."
          },
          "resolution": {
            "$ref": "#/components/schemas/Resolution"
          },
          "calculation": {
            "$ref": "#/components/schemas/CalculationMode"
          },
          "dataSignal": {
            "$ref": "#/components/schemas/DataSignal"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            },
            "description": "A dictionary with timestamp as key and the data\nmeasurement as value. The timestamp is in\nthe time zone configured in the Greenbyte Platform without UTC offset. Example:\n`{ ..., \"2020-01-01T00:00:00\": 584.33, ... }`."
          }
        },
        "description": "An object containing time-series data for a specific aggregate, data signal and interval."
      },
      "DataRealTimeItem": {
        "title": "DataRealTimeItem",
        "required": [
          "aggregate",
          "aggregateId",
          "deviceIds",
          "calculation",
          "dataSignal",
          "data"
        ],
        "type": "object",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/AggregateMode"
          },
          "aggregateId": {
            "type": "integer",
            "description": "The id of this aggregate group: device id, site id, or the constant -1 for portfolio. For `siteLevel` aggregation a generated unique id is used.",
            "format": "int32"
          },
          "aggregatePathNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "For `siteLevel` aggregation this contains the title for each level in the hierarchy. For other types of aggregation it will be empty."
          },
          "deviceIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of the devices in this aggregate group."
          },
          "calculation": {
            "$ref": "#/components/schemas/CalculationModeRealTime"
          },
          "dataSignal": {
            "$ref": "#/components/schemas/DataSignal"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "number"
            },
            "description": "A single key value pair with timestamp as key and the data measurement as value. The timestamps are in UTC.",
            "example": {
              "2020-01-01T00:00:00Z": 584.33
            }
          }
        },
        "description": "An object containing a single data point for a specific aggregate, data signal and interval."
      },
      "DataPerCategoryResponse": {
        "title": "DataPerCategoryResponse",
        "required": [
          "dataSignal",
          "calculation",
          "data"
        ],
        "type": "object",
        "properties": {
          "dataSignal": {
            "$ref": "#/components/schemas/DataSignal"
          },
          "calculation": {
            "$ref": "#/components/schemas/CalculationMode"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPerCategoryItem"
            },
            "description": "A list of objects: one per combination of\n* aggregate\n* contract category"
          }
        },
        "description": "An object containing data grouped by contract category and aggregate."
      },
      "DataPerCategoryItem": {
        "title": "DataPerCategoryItem",
        "required": [
          "aggregateId",
          "deviceIds",
          "contractTitle",
          "categoryTitle",
          "value"
        ],
        "type": "object",
        "properties": {
          "aggregateId": {
            "type": "integer",
            "description": "The id of this aggregate group: device id, site id, or the constant -1 for portfolio. For `siteLevel` aggregation a generated unique id is used.",
            "format": "int32"
          },
          "aggregatePathNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "For `siteLevel` aggregation this contains the title for each level in the hierarchy. For other types of aggregation it will be empty."
          },
          "deviceIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "The ids of the devices in this aggregate group."
          },
          "contractTitle": {
            "type": "string"
          },
          "categoryTitle": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "description": "The aggregated value of the selected data signal."
          },
          "duration": {
            "type": "number",
            "description": "The summed duration in seconds allocated to this contract category and aggregate group."
          }
        },
        "description": "Data for a single aggregate group and contract category combination.",
        "example": {
          "aggregateId": 6,
          "deviceIds": [
            1,
            2,
            3
          ],
          "contractTitle": "Vestas 1",
          "categoryTitle": "Icing",
          "value": 104.55,
          "duration": 150
        }
      },
      "StatusCategory": {
        "title": "StatusCategory",
        "enum": [
          "stop",
          "warning",
          "informational",
          "communication",
          "curtailment"
        ],
        "type": "string",
        "description": "The category a status belongs to."
      },
      "StatusItem": {
        "title": "StatusItem",
        "type": "object",
        "properties": {
          "turbineStatusId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a turbine status.",
            "format": "int32"
          },
          "deviceId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of the device affected by the status.",
            "format": "int32"
          },
          "timestampStart": {
            "type": "string",
            "description": "The timestamp when the status began. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "example": "2020-01-01T00:00:00"
          },
          "timestampEnd": {
            "type": "string",
            "description": "The timestamp when the status ended. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "example": "2020-01-08T00:00:00"
          },
          "hasTimestampEnd": {
            "type": "boolean",
            "description": "Indicates whether the status has a duration."
          },
          "category": {
            "$ref": "#/components/schemas/StatusCategory"
          },
          "code": {
            "type": "number",
            "description": "The status code."
          },
          "message": {
            "type": "string",
            "description": "A description of the status code."
          },
          "comment": {
            "type": "string",
            "description": "A user comment associated with the status."
          },
          "lostProductionSignal": {
            "$ref": "#/components/schemas/DataSignal"
          },
          "lostProduction": {
            "type": "number",
            "description": "The lost production in kWh associated with the status. This field\nwill be null if the caller is not authorized for the system-configured\nlost production signal. The configured lost production signal is available\nvia the `/configuration.json` endpoint (`DataSignalConfiguration` schema)."
          },
          "categoryIec": {
            "type": "string",
            "description": "The status category as defined by the IEC."
          },
          "categoryContract": {
            "type": "object",
            "description": "The status category as defined the availability contract assigned to the site."
          },
          "subStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusItem"
            },
            "description": "Statuses of the same type that have been grouped under this status.",
            "nullable": true
          },
          "acknowledged": {
            "type": "boolean",
            "description": "Indicates whether the status has been acknowledged."
          }
        },
        "description": "A status that may contain statuses of the same type as sub-statuses. Note that for sub-statuses the fields `categoryIec`, `categoryContract`, and `subStatus` will always be null."
      },
      "ConfigurationItem": {
        "title": "ConfigurationItem",
        "required": [
          "client",
          "timeZone",
          "dataSignals"
        ],
        "type": "object",
        "properties": {
          "client": {
            "$ref": "#/components/schemas/ClientConfiguration"
          },
          "timeZone": {
            "$ref": "#/components/schemas/TimeZoneConfiguration"
          },
          "dataSignals": {
            "$ref": "#/components/schemas/DataSignalConfiguration"
          }
        },
        "description": "Your configuration data."
      },
      "ClientConfiguration": {
        "title": "ClientConfiguration",
        "required": [
          "title",
          "tag",
          "urlWeb",
          "urlApi"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of your Greenbyte Platform website.",
            "example": "intro"
          },
          "tag": {
            "type": "string",
            "description": "Your internal customer tag.",
            "example": "intro"
          },
          "urlWeb": {
            "type": "string",
            "description": "Your URL to access the Greenbyte Platform website.",
            "example": "https://intro.greenbyte.cloud/"
          },
          "urlApi": {
            "type": "string",
            "description": "Your URL to access the Greenbyte Platform API.",
            "example": "https://intro.greenbyte.cloud/api/2.0/"
          }
        },
        "description": "General configuration data."
      },
      "TimeZoneConfiguration": {
        "title": "TimeZoneConfiguration",
        "required": [
          "title",
          "utcOffset",
          "utcOffsetDst",
          "dstTimestampStart",
          "dstTimestampEnd"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the time zone.",
            "example": "Europe/Stockholm"
          },
          "utcOffset": {
            "type": "number",
            "description": "The UTC offset for the time zone.",
            "example": 1
          },
          "utcOffsetDst": {
            "type": "number",
            "description": "The UTC offset for the time zone during daylight savings time.",
            "example": 2
          },
          "dstTimestampStart": {
            "type": "string",
            "description": "The start of daylight savings time in the time zone. This timestamp is given in UTC.",
            "format": "date-time",
            "example": "2020-03-29T01:00:00"
          },
          "dstTimestampEnd": {
            "type": "string",
            "description": "The end of daylight savings time in the time zone. This timestamp is given in UTC.",
            "format": "date-time",
            "example": "2020-10-25T01:00:00"
          }
        },
        "description": "The time zone configuration."
      },
      "DataSignalConfiguration": {
        "title": "DataSignalConfiguration",
        "required": [
          "availabilityTimeDataSignalId",
          "availabilityProductionDataSignalId",
          "lostProductionDataSignalId",
          "performanceDataSignalId"
        ],
        "type": "object",
        "properties": {
          "availabilityTimeDataSignalId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of the data signal used for time-based availability data.",
            "format": "int32"
          },
          "availabilityProductionDataSignalId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of the data signal used for production-based availability data.",
            "format": "int32"
          },
          "lostProductionDataSignalId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of the data signal used for lost production data.",
            "format": "int32"
          },
          "performanceDataSignalId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of the data signal used for performance data.",
            "format": "int32"
          }
        },
        "description": "Your data signal configuration. These only apply to wind devices."
      },
      "Site": {
        "title": "Site",
        "type": "object",
        "properties": {
          "siteId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a site.",
            "format": "int32"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "MetadataField": {
        "title": "MetadataField",
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "A metadata field."
      },
      "Device": {
        "title": "Device",
        "type": "object",
        "properties": {
          "deviceId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a device.",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "altTitle": {
            "type": "string",
            "description": "An alternative title.",
            "nullable": true
          },
          "identity": {
            "type": "string",
            "description": "Device identification number.",
            "nullable": true
          },
          "site": {
            "$ref": "#/components/schemas/Site"
          },
          "deviceType": {
            "type": "string",
            "description": "The string representation of the device type.",
            "example": "Turbine"
          },
          "deviceTypeId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a device type.",
            "format": "int32"
          },
          "parentId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of the parent device, if any.",
            "format": "int32",
            "nullable": true
          },
          "childIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids of child devices, if any."
          },
          "deviceModel": {
            "$ref": "#/components/schemas/DeviceModel"
          },
          "turbineType": {
            "$ref": "#/components/schemas/TurbineType"
          },
          "maxPower": {
            "type": "integer",
            "description": "The maximum power for a device.",
            "format": "int32"
          },
          "biddingArea": {
            "type": "string",
            "description": "Only applies to Nordic countries and the UK.",
            "nullable": true
          },
          "timestampStart": {
            "type": "string",
            "description": "The earliest timestamp device data is available for.",
            "format": "date-time"
          },
          "latitude": {
            "type": "string",
            "description": "The latitude of the device in the WGS84 system."
          },
          "longitude": {
            "type": "string",
            "description": "The longitude of the device in the WGS84 system."
          },
          "elevation": {
            "type": "string",
            "description": "The elevation of the device in meters above sea level."
          },
          "targetAvailability": {
            "maximum": 100.0,
            "minimum": 0.0,
            "type": "number",
            "description": "The target availability for the device.",
            "nullable": true
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataField"
            },
            "description": "A list of metadata fields and their values."
          }
        }
      },
      "DeviceModel": {
        "title": "DeviceModel",
        "type": "object",
        "properties": {
          "deviceModelId": {
            "type": "integer",
            "format": "int32"
          },
          "manufacturer": {
            "type": "string"
          },
          "model": {
            "type": "string"
          }
        },
        "description": "General device model information."
      },
      "TurbineType": {
        "title": "TurbineType",
        "type": "object",
        "properties": {
          "turbineTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "manufacturer": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "controller": {
            "type": "string",
            "description": "The model of the turbine controller."
          },
          "ratedPower": {
            "type": "integer",
            "format": "int32"
          },
          "maxRotorSpeed": {
            "type": "number"
          }
        },
        "description": "Turbine-specific type information."
      },
      "PowerCurve": {
        "title": "PowerCurve",
        "required": [
          "deviceId",
          "title",
          "values"
        ],
        "type": "object",
        "properties": {
          "deviceId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a device.",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "The title of the power curve."
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PowerCurveValue"
            },
            "description": ""
          }
        }
      },
      "PowerCurveValue": {
        "title": "PowerCurveValue",
        "required": [
          "windSpeed",
          "power"
        ],
        "type": "object",
        "properties": {
          "windSpeed": {
            "type": "number",
            "description": "Wind speed in m/s"
          },
          "power": {
            "type": "number",
            "description": "Power in kW"
          }
        },
        "description": "The power at a specific wind speed according to a power curve."
      },
      "SiteWithData": {
        "title": "SiteWithData",
        "type": "object",
        "properties": {
          "siteId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a site.",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataField"
            },
            "description": "A list of metadata fields and their values."
          }
        }
      },
      "AlertItem": {
        "title": "AlertItem",
        "type": "object",
        "properties": {
          "deviceId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of the device the alert was generated for.",
            "format": "int32"
          },
          "ruleId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of the rule the alert is based on.",
            "format": "int32"
          },
          "timestampStart": {
            "type": "string",
            "description": "The timestamp when the alert began. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "example": "2020-01-01T00:00:00"
          },
          "timestampEnd": {
            "type": "string",
            "description": "The timestamp when the alert ended. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "example": "2020-01-08T00:00:00"
          },
          "message": {
            "type": "string",
            "description": "The title of the rule the alert is based on."
          },
          "comment": {
            "type": "string",
            "description": "A user comment associated with the alert."
          },
          "description": {
            "type": "string",
            "description": "A description explaning the rule the alert is based on."
          },
          "details": {
            "type": "string",
            "description": "Additional details for the alert. Note that the structure of this data is subject to change."
          }
        },
        "description": "An alert generated for a device based on a rule."
      },
      "DeviceAccess": {
        "title": "DeviceAccess",
        "type": "object",
        "properties": {
          "deviceAccessId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a device access.",
            "format": "int32"
          },
          "siteAccessId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a site access.",
            "format": "int32"
          },
          "siteId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a site.",
            "format": "int32"
          },
          "deviceIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "The associated device ids."
          },
          "personnelIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "The associated personnel ids."
          },
          "taskIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "The associated task ids."
          },
          "timestampStart": {
            "type": "string",
            "description": "The timestamp when the device access is/was planned to start. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time"
          },
          "timestampEndExpected": {
            "type": "string",
            "description": "The timestamp when the device access is/was planned to end. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time"
          },
          "timestampEnd": {
            "type": "string",
            "description": "The timestamp when the device access actually ended. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "nullable": true
          },
          "logOnComment": {
            "type": "string",
            "description": "A comment for when logging on to the device."
          },
          "logOffComment": {
            "type": "string",
            "description": "A comment for when logging off from the device."
          }
        },
        "description": "A device access"
      },
      "SiteAccess": {
        "title": "SiteAccess",
        "type": "object",
        "properties": {
          "siteAccessId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a site access.",
            "format": "int32"
          },
          "siteId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a site.",
            "format": "int32"
          },
          "deviceIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "Device ids associated with the site access."
          },
          "taskIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "Task ids associated with the site access."
          },
          "siteAccessPersonnel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteAccessPersonnel"
            },
            "description": "Personnel associated with the site access."
          },
          "timestampStart": {
            "type": "string",
            "description": "The timestamp when the site access is/was planned to start. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time"
          },
          "timestampEndExpected": {
            "type": "string",
            "description": "The timestamp when the site access is/was planned to end. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time"
          },
          "timestampEnd": {
            "type": "string",
            "description": "The timestamp when the site access actually ended. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "nullable": true
          },
          "logOnComment": {
            "type": "string",
            "description": "A comment for when logging on to the site."
          },
          "logOffComment": {
            "type": "string",
            "description": "A comment for when logging off from the site."
          }
        },
        "description": "A site access."
      },
      "DowntimeEvent": {
        "title": "DowntimeEvent",
        "type": "object",
        "properties": {
          "downtimeEventId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a downtime event.",
            "format": "int32"
          },
          "timestampStart": {
            "type": "string",
            "description": "The timestamp when the downtime is/was planned to start. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "example": "2020-01-01T00:00:00"
          },
          "timestampEnd": {
            "type": "string",
            "description": "The timestamp when the downtime is/was planned to end. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "example": "2020-01-08T00:00:00"
          },
          "comment": {
            "type": "string",
            "description": "A comment describing the downtime event."
          },
          "deviceIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": ""
          },
          "siteIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": ""
          },
          "taskIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": ""
          }
        },
        "description": "A downtime event."
      },
      "Organization": {
        "title": "Organization",
        "type": "object",
        "properties": {
          "organizationId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "An id of an organization used for tasks and personnel.",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        },
        "description": "An organization used for tasks and personnel."
      },
      "Personnel": {
        "title": "Personnel",
        "type": "object",
        "properties": {
          "personnelId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a person in the personnel list.",
            "format": "int32"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "qualifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonnelQualification"
            },
            "description": ""
          },
          "siteInductions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonnelSiteInduction"
            },
            "description": ""
          }
        },
        "description": "A person in the personnel list."
      },
      "PersonnelQualification": {
        "title": "PersonnelQualification",
        "type": "object",
        "properties": {
          "qualificationId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a personnel qualification.",
            "format": "int32"
          },
          "manufacturer": {
            "type": "string"
          },
          "qualificationType": {
            "type": "string"
          },
          "qualificationDescription": {
            "type": "string"
          }
        },
        "description": "A personnel qualification."
      },
      "PersonnelSiteInduction": {
        "title": "PersonnelSiteInduction",
        "type": "object",
        "properties": {
          "siteInductionId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a personnel site induction.",
            "format": "int32"
          },
          "siteId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a site.",
            "format": "int32"
          },
          "dateExpires": {
            "type": "string",
            "description": "When the site induction expires.",
            "format": "date"
          }
        },
        "description": "A site induction."
      },
      "Task": {
        "title": "Task",
        "required": [
          "taskId",
          "title",
          "createdBy",
          "priority",
          "timestampStart",
          "timestampEnd",
          "state",
          "resolved",
          "numberOfComments"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a task.",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "example": "Maintenance"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "description": {
            "type": "string",
            "example": "Gearbox maintenance"
          },
          "category": {
            "$ref": "#/components/schemas/TaskCategory"
          },
          "priority": {
            "$ref": "#/components/schemas/TaskPriority"
          },
          "timestampStart": {
            "type": "string",
            "description": "The timestamp when the task is/was planned to start. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "example": "2020-01-01T00:00:00"
          },
          "timestampEnd": {
            "type": "string",
            "description": "The timestamp when the is/was planned to end. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "example": "2020-01-08T00:00:00"
          },
          "state": {
            "$ref": "#/components/schemas/TaskState"
          },
          "resolved": {
            "type": "boolean",
            "example": true
          },
          "timestampResolved": {
            "type": "string",
            "description": "The timestamp when the task was resolved. The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-01-08T00:00:00"
          },
          "deviceIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids of the devices assigned to the task."
          },
          "siteIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids of the sites assigned to the task."
          },
          "siteAccessIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids of the site accesses linked to the task."
          },
          "downtimeEventIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids of the downtime events linked to the task."
          },
          "statusIds": {
            "minimum": 1.0,
            "type": "array",
            "items": {
              "minimum": 1.0,
              "type": "integer",
              "format": "int32"
            },
            "description": "Ids of the statuses linked to the task."
          },
          "numberOfComments": {
            "minimum": 0.0,
            "type": "integer",
            "format": "int32",
            "example": 3
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskComment"
            },
            "description": "The comments belonging to the task."
          },
          "recurrence": {
            "$ref": "#/components/schemas/Recurrence"
          },
          "mainTaskId": {
            "minimum": 1.0,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "assignee": {
            "type": "object",
            "nullable": true
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataField"
            },
            "description": "A list of metadata fields and their values."
          }
        },
        "description": "A task."
      },
      "TaskAssigneeType": {
        "title": "TaskAssigneeType",
        "enum": [
          "user",
          "personnel",
          "manufacturer",
          "other"
        ],
        "type": "string",
        "description": "The type of task assignee."
      },
      "TaskAssigneeManufacturer": {
        "title": "TaskAssigneeManufacturer",
        "allOf": [
          {
            "$ref": "#/components/schemas/Assignee"
          },
          {
            "type": "object"
          }
        ],
        "description": "The manufacturer assigned to a task."
      },
      "TaskAssigneeOther": {
        "title": "TaskAssigneeOther",
        "allOf": [
          {
            "$ref": "#/components/schemas/Assignee"
          },
          {
            "required": [
              "text"
            ],
            "type": "object",
            "properties": {
              "text": {
                "type": "string",
                "description": "Free-text description of the assignee."
              }
            }
          }
        ],
        "description": "Information about some other entity assigned to a task."
      },
      "TaskAssigneePersonnel": {
        "title": "TaskAssigneePersonnel",
        "allOf": [
          {
            "$ref": "#/components/schemas/Assignee"
          },
          {
            "type": "object",
            "properties": {
              "personnelId": {
                "minimum": 1.0,
                "type": "integer",
                "description": "The id of a person in the personnel list.",
                "format": "int32"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "mobile": {
                "type": "string"
              },
              "organization": {
                "$ref": "#/components/schemas/Organization"
              },
              "qualifications": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonnelQualification"
                },
                "description": ""
              },
              "siteInductions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PersonnelSiteInduction"
                },
                "description": ""
              }
            }
          }
        ]
      },
      "TaskAssigneeUser": {
        "title": "TaskAssigneeUser",
        "allOf": [
          {
            "$ref": "#/components/schemas/Assignee"
          },
          {
            "required": [
              "firstName",
              "lastName"
            ],
            "type": "object",
            "properties": {
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TaskCategory": {
        "title": "TaskCategory",
        "required": [
          "categoryId",
          "title"
        ],
        "type": "object",
        "properties": {
          "categoryId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a task category.",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "example": "Scheduled maintenance"
          }
        },
        "description": "Basic information about a task category."
      },
      "TaskComment": {
        "title": "TaskComment",
        "required": [
          "commentId",
          "text",
          "timestampCreated",
          "createdBy"
        ],
        "type": "object",
        "properties": {
          "commentId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a task comment.",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "example": "Task updated"
          },
          "timestampCreated": {
            "type": "string",
            "description": "The timestamp when the comment was created (added to the\ntask). The timestamp is in the time zone configured in the Greenbyte Platform without UTC offset.",
            "format": "date-time",
            "example": "2020-01-01T00:00:00"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "A comment added to a task."
      },
      "TaskPriority": {
        "title": "TaskPriority",
        "enum": [
          "low",
          "medium",
          "high"
        ],
        "type": "string",
        "description": "The priority of a task."
      },
      "TaskState": {
        "title": "TaskState",
        "enum": [
          "unresolved",
          "resolved"
        ],
        "type": "string",
        "description": "The state of a task."
      },
      "Assignee": {
        "title": "Assignee",
        "required": [
          "assigneeType"
        ],
        "type": "object",
        "properties": {
          "assigneeType": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "assigneeType"
        }
      },
      "Category": {
        "title": "Category",
        "enum": [
          "Pictures",
          "Reports",
          "Other"
        ],
        "type": "string"
      },
      "IntervalType": {
        "title": "IntervalType",
        "enum": [
          "day",
          "week",
          "month",
          "year"
        ],
        "type": "string",
        "description": "The type of with which the task repeats."
      },
      "Recurrence": {
        "title": "Recurrence",
        "type": "object",
        "properties": {
          "interval": {
            "type": "integer",
            "description": "The interval with which the task repeats.",
            "format": "int32"
          },
          "intervalType": {
            "$ref": "#/components/schemas/IntervalType"
          },
          "dateEnd": {
            "type": "string",
            "description": "When the recurring task series ends (exclusive).\n\nThe end date is **not** included in the\nrecurring task series: for example, to have a\ntask series occur until and including the last\nday of March 2020, set `dateEnd` to\n\"2020-04-01\".",
            "format": "date"
          }
        },
        "description": "Recurrence settings for the task. To calculate when the\ntask is recurring, use the `timestampStart` field and\nthen add to it multiples of the specified interval; the\n`intervalType` field determines if the task is recurring\non daily, weekly, monthly, or yearly basis.\n\nIf the task is not recurring, this field is null.\n\n**Note:** Only the main (first) task in a recurring\nseries have recurrence settings. For the other tasks in\nthe series, the field `mainTaskId` can be used to find\nit."
      },
      "SiteAccessPersonnel": {
        "title": "SiteAccessPersonnel",
        "type": "object",
        "properties": {
          "personnelId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a person in the personnel list.",
            "format": "int32"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "company": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "vehicleRegistration": {
            "type": "string",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "timestampStart": {
            "type": "string",
            "format": "date-time"
          },
          "timestampEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "description": "Site access personnel."
      },
      "TasksFilesResponse": {
        "title": "TasksFilesResponse",
        "required": [
          "fileId",
          "fileName",
          "timestampUploaded",
          "uploadedBy"
        ],
        "type": "object",
        "properties": {
          "fileId": {
            "minimum": 1.0,
            "type": "integer",
            "description": "The id of a file.",
            "format": "int32"
          },
          "fileName": {
            "type": "string",
            "example": "250.png"
          },
          "timestampUploaded": {
            "type": "string",
            "description": "The timestamp when the file was uploaded.",
            "format": "date-time",
            "example": "2020-01-08T00:00:00"
          },
          "uploadedBy": {
            "$ref": "#/components/schemas/User"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "A photo of the nacelle"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          }
        }
      }
    },
    "securitySchemes": {
      "Api-Key": {
        "type": "apiKey",
        "description": "",
        "name": "X-Api-Key",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Api-Key": []
    }
  ],
  "tags": [
    {
      "name": "data",
      "description": "This section contains operations related to either time-series or aggregated signal data.\n## Data signals\nData signals are binary code signals which transmit information like temperature, wind speed, and power from an asset or device to the Greenbyte Platform. In addition the Greenbyte Platform provides KPIs and other advanced calculations that are also exposed as signals.\n## Data resolution\nData can be returned in different resolutions, for example ten minute resolution or daily resolution.\n## Data aggregation\nDifferent kinds of data are aggregated (combined) in different ways. The calculation mode of the signal determines how individual data points are aggregated. All signals have a default calculation mode, for example:\n* *Sum* is used for energy signals, which means data values are summed.\n* *Average* for wind speed signals, which means that data values are averaged.\nWhen combining data from several devices you can also choose if the data is aggregated per individual device or per site or if all of the data is combined into one value.\n[Signal Calculations in the Greenbyte Platform documentation](https://help.greenbyte.com/Greenbyte/en/signal-calculations.html)\n"
    },
    {
      "name": "statuses",
      "description": "This section contains operations related to device statuses. Device statuses are related to availability contracts.\n[Availability contracts in the Greenbyte Platform documentation](https://help.greenbyte.com/Greenbyte/en/availability-contracts.html)\n"
    },
    {
      "name": "configuration data",
      "description": "This section contains operations related to configuration data."
    },
    {
      "name": "assets",
      "description": "This section contains operations related to assets, such as sites and devices.\n## Devices\nIn this context, *devices* are power-producing devices such as wind turbines and inverters as well as instruments such as met masts and grid meters, which measure, record, and communicate data and metadata for a site or device.\n## Power curves\nPower curves are graphs which indicate how large the electrical power output of a wind turbine will be at different wind speeds.\n\nPower curves are used for potential power calculation and for performance KPIs. The default power curve is defined when the wind turbine is installed in the Greenbyte Platform, but you can alter the default or add power curves as needed. Having multiple power curves enables calculations in the system to adapt to different circumstances, like curtailment, sector management, or technical management.\n"
    },
    {
      "name": "alerts",
      "description": "This section contains operations related to device alerts.\n## Alerts\nAlerts analyze incoming data based on a set of rules defined by a user. For example, you can set up rules to check that a data signal is above a certain threshold, or that the data signals of two different units follow the same pattern. This can help you gain a better understanding of your portfolio.\n"
    },
    {
      "name": "plan",
      "description": "This section contains operations related to the configuration of future events. \nThis includes tasks, site accesses (and their connected device accesses), downtimes, personnel and organizations.\n"
    }
  ]
}
